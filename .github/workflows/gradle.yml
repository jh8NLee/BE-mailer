# 워크 플로우 이름
name: Project CI/CD

# 워크 플로우가 언제 실행 될지를 정한다.
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# 워크 플로우가 깃 레포에 대한 권한을 읽기 만 가능하게 설정한다.
permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest #실행 환경 지정
    #실행 스텝 지정
    steps:
      #check-out 하여 레포지토리에 접근할 수 있는 action
      - uses : actions/checkout@v3

      #jdk 17
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      #Gradle 빌드
      #gradle build (-x test: 테스트 생략 빌드)
      - name: Build with Gradle
        run: |
          echo ${{secrets.APPLICATION_YML}} | base64 
           chmod +x ./gradlew
          ./gradlew build -x test
      
      

      #빌드해서 생긴 JAR 파일을 깃허브 아티팩트로 업로드
      #Artifact를 통해 작업을 완료한 후 데이터를 보관하고 동일한 Workflow의 다른 작업에서 공유
      - name: Upload build artifact
        uses: actions/upload-artifact@v4 #upload artifact version == download artifact version
        with:
          name: g25Server
          # 업로드할 파일의 경로를 지정 (build/libs,  g25Server jar 파일을 업로드)
          # 빌드 단계에서 생성된 jar파일
          path: build/libs/*.jar


  #배포
  deploy:
    needs: build #빌드 성공한 경우에만 deploy
    # Ubuntu 환경에서 실행 (Github Actions에서 제공하는 기본 실행 중 하나)
    runs-on: ubuntu-latest

    # Github 이벤트가 push일 때만 작업을 실행
    if: github.event_name == 'push'

    # 위의 빌드작업한 JAR 파일 = 아티팩트를 다운로드
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4 #upload artifact version == download artifact version
        with:
          # Project 이름으로 업로드된 artifact를 build/libs 경로에 다운로드
          name: g25Server
          path: build/libs/

      # JAR 파일 존재 여부 확인
      - name: Check if JAR file exists after download
        run: ls -alh build/libs/

      - name: Decode SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 -d > private_key.pem
          chmod 400 private_key.pem

      - name: Copy JAR to EC2
        run: |
          scp -i private_key.pem -o StrictHostKeyChecking=no build/libs/*.jar ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USERNAME }}/app/g25Server.jar

      - name: SSH into EC2 and restart service
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
          if pgrep -f g25Server.jar > /dev/null; then
            echo "서버 실행 중 - 종료 중..."
            pkill -f g25Server.jar
          fi
          nohup java -jar /home/${{ secrets.EC2_USERNAME }}/app/g25Server.jar > /home/${{ secrets.EC2_USERNAME }}/app/app.log 2>&1 &
          disown
          EOF

      - name: Clean up private key
        run: rm -f private_key.pem